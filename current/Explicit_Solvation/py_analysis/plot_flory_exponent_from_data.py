#!/home/satyend/.conda/envs/data_analysis/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
import aux 
import time 
import sys 
import multiprocessing 
import itertools
from sklearn.linear_model import LinearRegression 

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
gives you the flory exponent
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain the flory exponent from that file.")
parser.add_argument('--dump-file', dest='df', metavar='df', action='store', type=str, help='Name of dump file.')
parser.add_argument('--png-name', dest='pn', metavar='imagename', action='store', type=str, help='Name of image.')
args = parser.parse_args() 

divnorm = matplotlib.colors.SymLogNorm (0.005, vmin=-0.2, vmax=0.1)


if __name__ == "__main__":    

	start = time.time() 
	##################################

	U_list = aux.dir2U ( os.listdir (".") )
	#################################

	fig = plt.figure   ( figsize=(8,6) )
	ax  = plt.axes() 
	ax.tick_params(direction='in', bottom=True, top=True, left=True, right=True, which='both')
	ax.tick_params(axis='x', labelsize=16)
	ax.tick_params(axis='y', labelsize=16)
	i = 0 

	f = open(args.df, "r") 
	flory_exp = "flory exp"
	T = "T"
	PLOT_DICT = {} 
	for line in f:
		if ( re.findall ("U\d+", line) ):
			r = re.findall ( "U\d+", line ) 
			PLOT_DICT[r[0]] = [] 
			print ("U = ", r[0])
			continue
		elif ( re.findall (flory_exp, line) ):
			flory_list = line.strip().split() 
			flory_list = [float(elem) for elem in flory_list[2:]]
			PLOT_DICT[r[0]].extend(flory_list)
			print ("PLOT_DICT[",r[0],"] = ", PLOT_DICT[r[0]] )
			print ("exps = ", end=' ')
			print(flory_list)
			continue
		elif ( re.findall ( T, line ) ):
			temp_list = line.strip().split() 
			temp_list = [float(elem) for elem in temp_list[1:]]
			print ("T = ", end=' ') 
			print (temp_list)
			continue 
	
	##################################
	for U in U_list:
		chi = aux.get_chi_cosolvent ( str(U)+"/geom_and_esurf.txt" )[0]
		print (chi)
		rgba_color = cm.PiYG ( divnorm (chi) ) 
		ax.plot (np.asarray(temp_list), np.asarray(PLOT_DICT[U])/2, marker='o', linewidth=3, markeredgecolor='k', linestyle='-', c=rgba_color, label='_nolegend_', markersize=10 ) 


	stop = time.time() 
	my_cmap = cm.PiYG
	sm = plt.cm.ScalarMappable ( cmap=my_cmap, norm=plt.Normalize(vmin=-0.2, vmax=0.1) )
	cbar = plt.colorbar(sm, orientation='vertical') 
	cbar.set_ticks ( [-0.2, 0.1] )
	cbar.set_ticklabels( ["-0.1"," 0.1"] ) 
	cbar.ax.tick_params(labelsize=14)
	# cbar.ax.set_ylabel ("$\chi ^a$", fontsize=18, rotation=270, labelpad=15)
	ax.set_xscale('log')
	yticks = np.linspace(0.2, 0.8, 7) 
	yticks = np.hstack ((yticks, 0.57))
	yticks[0] = 0.25 
	yticks[-2] = 0.75
	yticks = np.hstack((yticks, 0.33))
	ax.set_yticks ( yticks ) 
	ax.yaxis.set_minor_locator (matplotlib.ticker.AutoMinorLocator())
	plt.savefig   ( args.pn+".png", dpi=1000)

	print ("Run time is {:.2f} seconds.".format(stop-start), flush=True)

