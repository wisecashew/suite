

//============================================================
//============================================================
// 
// NAME OF FUNCTION: ClusterParticleMaker
//
// PARAMETERS: a well-defined Grid  
// 
// WHAT THE FUNCTION DOES: it looks at the Polymers In Grid and charts out all the solvent molecules that interact 
// with the polymers. The idea is that you dont need to update the orientation of the entire box, because it doesnt 
// matter if solvent molecules not in contact with the polymer are flipped.    
// 
// DEPENDENCIES: obtain_ne_list, OccupancyMap
//
// THE CODE: 
/*
std::vector <Particle> Grid::ClusterParticleMaker(){
    
    std::vector <Particle> Particles; 

    std::vector <std::vector <int>> solvent_locations;  

    for (Polymer& pmer: this->PolymersInGrid){

        for (Particle& p: pmer.chain){
 
                Particles.push_back (p); 
                std::array <std::array <int,3>, 6> ne_list = obtain_ne_list(p.coords, this->x, this->y, this->z);

                // std::cout << "The polymer particle I added to list is: "; 
                // print(p.coords); 

                for (std::array <int,3>& v: ne_list){

                    if (this->OccupancyMap[v].ptype=="solvent" ){
                        
                        if (std::find(solvent_locations.begin(), solvent_locations.end(), this->OccupancyMap[v].coords) != solvent_locations.end() ){
                            
                        }

                        else {
                            solvent_locations.push_back(this->OccupancyMap[v].coords) ;
                            Particles.push_back(this->OccupancyMap[v]); 
                            // std::cout << "The solvent molecule is at: "; 
                            // print(this->OccupancyMap[v].coords); 
                        }
                    }
                }
        }
    }
    // std::cout << "Locations of particle to Ising flip are: " << std::endl;
    // for (auto part: Particles){
    //     print(part.coords); 
    // }

    return Particles; 
}
*/

//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//             End of ClusterParticleMaker. 
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#


//============================================================
//============================================================
// 
// NAME OF FUNCTION: ClusterMaker
//
// PARAMETERS: a well-defined Grid  
// 
// WHAT THE FUNCTION DOES: Once the particles that can POTENTIALLY be part of a cluster have been identified, 
// the next thing to do is make the network. You pick a particle at random from the potential cluster, consider all
// the neighbors with in the cluster with the same orientation. You form a bond with those neighbors with a probability of 
// exp(-2\beta J). Once the network has been formed, flip orientation of every particle in network. 
// 
// DEPENDENCIES: ExtractContentFromFile, energy predictor 
//
// THE CODE: 
/*
std::vector <Particle> Grid::ClusterMaker(std::vector <Particle> Particles, std::vector <Particle> final, std::vector <Particle> to_send_, int count){

    if ( static_cast<int>(to_send_.size()) == 0 && count == 1){

        // std::cout << "There is nothing to send..." << std::endl;
        return final; 
    }

    if (count==0){
        
        // std::cout << "ENTRY POINT!" << std::endl;
        std::vector <Particle> to_send; 
        int r = rng_uniform(0, Particles.size()-1); 
        // std::cout << "Length of Particles is " << Particles.size() << std::endl;
        
        
        Particle p = Particles.at(r); 

        // std::cout << "The absolute first particle is "; 
        // print(p.coords);

        final.push_back(p); 
        std::vector <std::vector <int>> location_list; 

        for (Particle pa: Particles){
            location_list.push_back(pa.coords); 
        }

        std::vector <Particle> neighbors;

        std::vector <std::vector <int>> ne_list = obtain_ne_list(p.coords, this->x, this->y, this->z); 

        

        if (p.ptype=="solvent"){
            for (std::vector <int> v: ne_list){
                if (std::find(location_list.begin(), location_list.end(), v) != location_list.end() ){

                    if (this->OccupancyMap[v].orientation == p.orientation){
                        neighbors.push_back(this->OccupancyMap[v]); 
                    }
                }
            }
        }
        else {
            for (std::vector <int> v: ne_list){
                if (this->OccupancyMap[v].orientation == p.orientation){
                        neighbors.push_back(this->OccupancyMap[v]); 
                }
            }
        }

        // std::cout << "Number of good neighbors is " << neighbors.size() << std::endl;
        for (Particle pcle: neighbors){
            double coupling = 2*1/this->kT*EnergyPredictor(p, pcle); 
            // std::cout << "coupling is " << coupling << std::endl;
            double prob = std::exp(coupling); 
            // std::cout << "Probability of coupling is " << prob << std::endl;
            double check = rng_uniform(0.0,1.0);
            // std::cout << "check is " << check << std::endl;
            // std::cout << "for particle "; 
            // print(pcle.coords); 
            if (check < prob){
                // std::cout << "prob is " << prob << std::endl; 
                // std::cout << "check is " << check << std::endl;

                final.push_back(pcle); 
                to_send.push_back(pcle); 
                // std::cout << "neighbor approved :"; 
                // print(pcle.coords);
            }
            else {
                continue; 
            }
        }

        count = 1 ;
        
        std::cout << "This has to be hit only once!!!!!!!!!!!!!! " << std::endl; 
        std::cout << "Count is " <<count << std::endl;
        std::cout << "printing out first final"<<std::endl;
        for (auto ppp: final){
            print(ppp.coords); 

        }
        std::cout << "printing out first to_send" <<std::endl;
        for (auto pppp: to_send){
            print(pppp.coords);
        }
        
        final = this->ClusterMaker(Particles, final, to_send, count); 

    

    }

    else if (count==1){
        
        for (Particle p: to_send_){
            
            std::vector <std::vector <int>> location_list; // this will contain the original master cluster 
            std::vector <Particle> to_send; 

            for (Particle px: Particles){
                location_list.push_back(px.coords); 
            }
            std::vector <Particle> neighbors;

            std::vector <std::vector <int>> final_list; 

            for (Particle pf: final){
                final_list.push_back(pf.coords); 

            }

            std::vector <std::vector <int>> ne_list = obtain_ne_list(p.coords, this->x, this->y, this->z); // obtaining the neighbors of the main guy 

            if (p.ptype=="solvent"){
                for (std::vector <int> v: ne_list){
                    
                    if ( std::find(location_list.begin(), location_list.end(), v) != location_list.end() ){

                            if ( !(std::find ( final_list.begin(), final_list.end(), v) != final_list.end() ) ){
                        
                                if ( this->OccupancyMap[v].orientation == p.orientation){

                                    neighbors.push_back(this->OccupancyMap[v]); // added to potential neighbor list  
                                }
                        }
                    }
                }
            }
            else {
                for (std::vector <int> v: ne_list){
                    if ( !(std::find ( final_list.begin(), final_list.end(), v) != final_list.end() ) ){
                        if (this->OccupancyMap[v].orientation == p.orientation){
                            neighbors.push_back(this->OccupancyMap[v]);     // added to potential neighbor list 
                        }
                    }
                }
            }

            // std::cout << "For particle "; 
            // print(p.coords);
            // std::cout << "Number of good neighbors is " << neighbors.size() << std::endl;

            for (Particle pcle: neighbors){
                // std::cout << "Energy is " << EnergyPredictor(p, pcle) << std::endl;
                double coupling = 2*1/this->kT*EnergyPredictor(p, pcle); 
                double prob = std::exp(coupling); 
                // std::cout << "Probability of coupling is " << prob << std::endl;

                double check = rng_uniform(0.0,1.0);
                // std::cout << "check is " << check << std::endl;
                // std::cout << "for particle "; 
                // print(pcle.coords); 
                if (check < prob){
                    final.push_back(pcle); 
                    to_send.push_back(pcle); 
                }
                else {
                    continue; 
                }
            }
            count = 1;
            
            
            std::cout << "Given current particle as: ";
            print(p.coords);  
            std::cout << "printing out the next iteration of final:" << std::endl;

            for (auto ppp: final){
                std::cout << ppp.orientation << ", ";
                print(ppp.coords); 
            }
            
            std::cout << "size of final cluster is " << final.size() << std::endl;
            std::cout << "printing out new to_send" <<std::endl;
            for (auto pppp: to_send){
                print(pppp.coords);
            }
            

            final = this->ClusterMaker(Particles, final, to_send, count); 
        }



    }

    
    std::cout << "The particles in cluster are " << std::endl; 
    for (auto part: final){
        std::cout << "Particle type is " << part.ptype << ", location is: ";
        print(part.coords);
    }
    

    return final; 

}
*/
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//             End of ClusterParticleMaker. 
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#
//~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#

