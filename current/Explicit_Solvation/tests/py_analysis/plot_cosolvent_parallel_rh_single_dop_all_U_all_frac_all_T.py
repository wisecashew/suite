#!/usr/licensed/anaconda3/2020.7/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
import aux 
import time 
import sys 
import multiprocessing 

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this index.', default=100)
parser.add_argument('--excl-vol', dest='ev', action='store_true', help='Flag to include excluded volume forcefield.', default=False) 
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('--show-plot', dest='sp', action='store_true', help='Flag to include to see plot.') 
args = parser.parse_args() 


if __name__ == "__main__":    

    start = time.time() 
    
    #########################
    #aux.plot_entropy_rh_parallelized_single_dop_all_U_all_T ( args.dop, args.s, args.ev, args.c, args.sp )

    U_list = aux.dir2U ( os.listdir (".") )
        
    # print (edge_length(dop))
    fig = plt.figure( figsize=(8,6) )
    ax  = plt.axes() 
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    i = 0 
    Tmax = [] 

    # instantiating pool
    pool1 = multiprocessing.Pool ( processes=50 )# len(num_list)) 
    pool2 = multiprocessing.Pool ( processes=5 )
    
    pool_list = [pool1, pool2]
    
    f = open("INV_RH_DATA_"+str(dop), "w") 

    for U in U_list:
        f.write("U = " + U + ":\n")
        print("Inside U = " + U + ", and N = " + str(dop), flush=True )
        rh_mean = [] 
        rh_std  = [] 
        temperatures = aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(dop) ) )
        Tmax.append ( np.max(temperatures) )
        
        # get num_list for each temperature 
        master_temp_list = [] 
        master_num_list = [] 
        rh_dict    = {}
        ntraj_dict = {}
        for T in temperatures: 
            # print ("T is " + str(T), flush=True) 
            num_list = list( np.unique ( dir2nsim (os.listdir (str(U) + "/DOP_" + str(dop) + "/" + str(T) ) )  ) )
            master_num_list.extend ( num_list )
            master_temp_list.extend ( [T]*len( num_list ) )
            ntraj_dict[T] = len ( num_list )
            rh_dict[T] = []


        # start multiprocessing... keeping in mind that each node only has 96 cores 
        # start splitting up master_num_list and master_temp_list 
        mtemp_list_p1 = master_temp_list[0:50] 
        mtemp_list_p2 = master_temp_list[50:100]
        mtemp_list_p3 = master_temp_list[100:105]
        mtemp_list    = [mtemp_list_p1, mtemp_list_p2, mtemp_list_p3] 

        mnum_list_p1  = master_num_list[0:50]
        mnum_list_p2  = master_num_list[50:100]
        mnum_list_p3  = master_num_list[100:105] 
        mnum_list     = [mnum_list_p1, mnum_list_p2, mnum_list_p3] 

        # it is a shitty dict 
        shitty_dict = {0:0, 1:0, 2:1}

        for uidx in range(3):
            
            results = pool_list[ shitty_dict[uidx] ] .starmap ( \
                    aux.infiltrate_coords_get_rh, zip( itertools.repeat(U), mtemp_list[uidx],\
                    mnum_list[uidx], itertools.repeat(dop), \
                    itertools.repeat(coords_files), itertools.repeat(starting_index) ) )

            print ("Pool has been closed. This pool has {} threads.".format (len(results) ), flush=True )     

            for k in range(len(mtemp_list[uidx])):
                rh_dict[mtemp_list[uidx][k]].append(results[k]) 
        
            for T in np.unique (mtemp_list[uidx]):
                rh_mean.append( np.mean ( rh_dict[T] ) ) 
                rh_std.append ( np.std  ( rh_dict[T] ) / np.sqrt( ntraj_dict[T] ) ) 

        ax.errorbar   ( temperatures, np.asarray(rh_mean)*np.sqrt(dop), yerr=np.asarray(rh_std)*np.sqrt(dop), fmt='o', markeredgecolor='k', \
                linestyle='-', elinewidth=1, capsize=0, linewidth=1, \
                color=cm.copper(i/9), label='_nolegend_' ) 
        
        f.write("invRh: ") 
        for elem in rh_mean:
            f.write ("{:.2f} ".format(elem) ) 
        f.write("\n") 
        f.write("Error: ") 
        for elem in rh_std:
            f.write( "{:.2f} ".format(elem) ) 
        f.write("\n") 
        f.write("T: ") 
        for elem in temperatures:
            f.write( "{:.2f} ".format(elem) ) 
        f.write("\n") 
        f.flush() 
        i+=1 
    

    pool1.close()
    pool1.join()

    pool2.close()
    pool2.join() 

    f.close() 
    
    # plot Uexcl...
    if excl_vol_bool:
        f = open ("INV_RH_DATA_"+str(dop), 'a') 
        f.write ("U = Uexcl:\n")
        temperatures_excl = aux.dir2float ( os.listdir( "Uexcl/DOP_"+str(dop) ) )
        edge = aux.edge_length (dop)
        rh_list = []
        for T in temperatures_excl:
            filename = "Uexcl/DOP_"+str(dop)+"/"+str(T)+"/"+coords_files
            edge = aux.edge_length (dop) 
            master_dict = aux.get_pdict ( filename, 0, dop, edge, edge, edge )
            
            count = 0 
            for key in master_dict:
                coord_arr = aux.unfuck_polymer ( master_dict[key][0], edge, edge, edge)
                rh_list.append (  np.sum ( 1/ ssd.pdist( coord_arr, 'euclidean' ) )/(dop*(dop-1)/2)  )
            
            rh_mean = np.mean (rh_list) 
            rh_std  = np.std  (rh_list) 

        ax.errorbar ( temperatures, np.ones (len(temperatures))*rh_mean*np.sqrt(dop), yerr=np.ones (len(temperatures))*rh_std/(np.sqrt(dop)*np.sqrt(20)), fmt='^', markeredgecolor='k', \
                linestyle='-', elinewidth=1, capsize=0, linewidth=1 ) 
        ax.legend (["Athermal solvent"], bbox_to_anchor=(90, 1), fontsize=12)

        f.write("invRh: ")
        for j in range(len(temperatures)):
            f.write("{:.2f} ".format(rh_mean) )
        f.write("\n")
        f.write("Error: ")
        for j in range(len(temperatures)):
            f.write  ("{:.2f} ".format(0)) 
        f.write("\n")
        f.write("T: ")
        for elem in temperatures:
            f.write ("{:.2f} ".format(elem))
        f.write ("\n")
        f.flush()
        f.close()


######################################
    my_cmap = cm.copper 
    sm = plt.cm.ScalarMappable ( cmap=my_cmap, norm=plt.Normalize(vmin=0, vmax=1) )

    cbar = plt.colorbar(sm, orientation='vertical') 
    cbar.set_ticks ( [0, 1] )
    cbar.set_ticklabels( ["Weakest", "Strongest"] ) 
    cbar.ax.tick_params (labelsize=14)
    cbar.set_ticklabels( ["0", "0.2"] )
    cbar.ax.set_ylabel ( "Fraction of solvent without \ndirectional interactions\n\n", fontsize=18, rotation=270 ) 
    ax.set_ylabel ( "$\\left\\langle \\frac{1}{R_h} \\right\\rangle \cdot \sqrt{N}$", fontsize=18)     
    ax.set_xscale ("log")
    ax.yaxis.set_major_locator( matplotlib.ticker.MaxNLocator(10) ) 
    # ax.yaxis.set_major_formatter(FormatStrFormatter('%1.2f'))
    # ax.set_xticks ( temperatures )
    plt.savefig   ( "DOP_"+str(dop)+"_rh.png", dpi=800)
    if show_plot_bool:
        plt.show() 

    #########################
    stop = time.time() 

    print ("Run time for N = " + str(args.dop) + " is {:.2f} seconds.".format(stop-start), flush=True)
        
