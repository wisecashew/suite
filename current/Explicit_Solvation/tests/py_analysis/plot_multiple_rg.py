#!/usr/bin/env python3

import numpy as np 
import re 
import matplotlib
# matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
import aux 
import time 


'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this index.', default=100)
parser.add_argument('--excl-vol', dest='ev', action='store_true', help='Flag to include excluded volume forcefield.', default=False) 
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('--show-plot', dest='sp', action='store_true', help='Flag to include to see plot.') 
args = parser.parse_args() 


if __name__ == "__main__":    

    start = time.time() 

    aux.plot_rg( args.dop, args.s, args.ev, args.c, args.sp )

    stop = time.time() 

    print ("Run time = " + str (stop-start) + " seconds.")
        
