#!/usr/licensed/anaconda3/2020.7/bin/python

import numpy as np 
import re 
import matplotlib.pyplot as plt 
import pandas as pd
import matplotlib.cm as cm 
import aux 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you hydrodynamic radius. 
'''

''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''

import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this index.', default=100)
parser.add_argument('--excl_vol', dest='ev', action='store_true', help='flag to include excluded volume forcefield.', default=0)  
parser.add_argument('--dump-file', dest='e', metavar='energydump', action='store', type=str, help='Name of energy dump file to parse information.', default='energydump.txt') 
parser.add_argument('--show-plot', dest='sp', action='store_true', help='Flag to include if you want the image to be rendered on screen.',default=False) 

args = parser.parse_args() 


if __name__ == "__main__":
    
    U_list       = aux.dir2U ( os.listdir (".") ) # ["U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9"]
    dop          = args.dop
        
    if args.ev:
        U_list.append("Uexcl")


    fig = plt.figure( figsize=(8,6) )
    ax  = plt.axes() 
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    i = 0 
    
    for U in U_list:
        rh_mean = np.asarray([]) 
        rh_std  = np.asarray([])     
        temperatures = dir2float ( os.listdir( str(U) +"/DOP_"+str(args.dop) ) )
        Tmax.append ( np.max(temperatures) )
        
        for T in temperatures:
            num_list = np.unique ( aux.dir2nsim (os.listdir ( str(U) + "/DOP_"+str(args.dop) + "/" + str(temp) ) ) )

            for num in num_list:
                df = pd.read_csv(str(U)+"/DOP_"+str(args.dop)+"/"+str(temp)+"/"+args.e+"_"+str(num), sep=' \| ', names=["energy", "mm_tot", "mmaligned", "mmnaligned", "ms_tot", "msaligned", "msnaligned", "ts"], engine='python', skiprows=1)
                mm_list = np.hstack( (mm_list, ( df["mm_tot"].values[args.s:] ) - (args.dop-1) ) )
            
            master_dict = get_pdict (filename, dop+2, dop+2, dop+2) 
            rg = np.asarray([]) 
            
            for key in master_dict: 
                rg.append( get_Rg(master_dict[key][0], dop+2, dop+2, dop+2) ) 

            rg_mean.append ( np.mean(rg[args.s:]) )         
            rg_std.append  ( np.std(rg[args.s:])/np.sqrt(len(rg[args.s::100]) ))
        
        rg_mean = np.array (rg_mean) 
        rg_std  = np.array (rg_std )    
       
        if U=="Uexcl":
            ax.errorbar   ( temperatures[1:], rg_mean, yerr=rg_std, linewidth=3 )
        else:
            ax.errorbar   ( temperatures, rg_mean, yerr=rg_std, linewidth=1, color=cm.copper(i/9), label='_nolegend_') 
        i+=1 
    
    ax.legend     ( ["Athermal solvent"], loc='best', fontsize=12)
    ax.set_xlabel ( "Temperature (reduced)", fontsize=18) 
    ax.set_ylabel ( "$R_g ^2$", fontsize=18)     
    plt.savefig   ( "DOP_"+str(args.dop)+"_rg.png", dpi=1200)
    plt.show() 
        
