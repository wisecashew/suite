#!/usr/licensed/anaconda3/2020.7/bin/python

import numpy as np 
import re 
import matplotlib.pyplot as plt 
import pandas as pd

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration
'''

import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration histogram.")
parser.add_argument('-U', metavar='UX', dest='U', action='store', type=str, help='enter identifier of energy surface.')
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this index.', default=100)

args = parser.parse_args() 

def extract_loc_from_string(a_string):
    loc = [int(word) for word in a_string.split() if word.isdigit()]
    
    return np.asarray(loc)     

def modified_modulo(divident, divisor):
    midway = divisor/2
    if (divident%divisor > midway):
        result = (divident%divisor)-divisor 
        return result
    else:
        return divident%divisor         


def unfuck_polymer(polymer, x, y, z): 
    unfucked_polymer = np.asarray([polymer[0,:]])
    
    for i in range ( polymer.shape[0]-1 ) :
        diff = polymer[i+1,:] - polymer[i,:]
        
        for j in range(3):
            diff[j] = modified_modulo(diff[j], x)
        
        unfucked_polymer = np.vstack( (unfucked_polymer, unfucked_polymer[i]+diff ) )
    
    return unfucked_polymer         


def get_Rg(coord_arr, xlen, ylen, zlen):
    
    coord_arr = unfuck_polymer(coord_arr, xlen, ylen, zlen)
    
    r_com = np.mean(coord_arr, axis=0) 
    N = coord_arr.shape[0]
    rsum = 0
    
    for i in range(N): 
        rsum += np.linalg.norm( coord_arr[i,:]- r_com )**2 
    
    rsum = rsum/N 
    
    return rsum 


def get_pdict(filename, x, y, z):
    f = open(filename, 'r')
    coord_file = f.readlines() 
    
    st_b_str = "Dumping coordinates at step" 
    pmer_num_str = "Dumping coordinates of Polymer"
    start_str = "START"
    end_str_1 = "END" 
    end_str_2 = "~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#\n" 

    # master_dict will be the dictionary which will contain polymer coordinates at each step     
    master_dict = {} 
    xlen, ylen, zlen = x, y, z
    
    step_flag     = 0
    pmer_flag     = 0
    end_step_flag = 0
    step_num      = 0

    # given a string, it will extract all numbers out in chronological order 
    # and put them in a numpy array 
    
    for line in coord_file:
        if ( re.search(st_b_str, line)):
            step_num = int ( ( extract_loc_from_string ( line.replace('.', ' ') ) ) )
            master_dict [step_num] = {}
            
            step_flag     = 1
            pmer_flag     = -1
            end_step_flag = 0
            continue 

        elif ( re.search(start_str, line) ):
            continue

        elif ( re.search(pmer_num_str, line) ):
            pmer_flag += 1
            master_dict[step_num][pmer_flag] = np.empty ( (0,3) ) 
            continue 

        elif ( re.search(end_str_1, line) ): 
            end_step_flag = 1
            step_flag     = 0
            pmer_flag     = -1 
            continue 

        elif ( re.search(end_str_2, line) ):
            continue 

        else:
            monomer_coords                   = extract_loc_from_string ( line ) 
            master_dict[step_num][pmer_flag] = np.vstack ( (master_dict[step_num][pmer_flag], monomer_coords[0:-2] ) ) 
            continue
    
    return master_dict 

if __name__ == "__main__":
    print("Is this running?") 
    U            = args.U
    dop          = args.dop
    temperatures = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0]
        
    rg_mean = np.array([])
    rg_std  = np.array([]) 
    for T in temperatures:
        rg_rel = np.array([])
        for cfile in ["coords.txt"]: # , "coords2.txt", "coords3.txt", "coords4.txt", "coords5.txt"]:
            filename = U +"/DOP_"+str(dop)+"/"+str(T)+"/"+cfile
            master_dict = get_pdict (filename, dop+2, dop+2, dop+2) 
            rg = np.array([])  
            for key in master_dict: 
                rg = np.hstack( (rg, get_Rg(master_dict[key][0], dop+2, dop+2, dop+2) ) ) 

            rg_rel = np.hstack ( ( rg_rel, rg[args.s:] ) )
        
        rg_mean = np.hstack ( ( rg_mean, np.mean(rg_rel ) ) ) 
        rg_std  = np.hstack ( ( rg_std , np.std(rg_rel )/np.sqrt(5) ) )     
    
    fig = plt.figure() 
    ax  = plt.axes() 
    # print(rg_std)
    ax.errorbar   ( temperatures, rg_mean, yerr= 0 )# rg_std ) 
    ax.set_xlabel ( "Temperature" ) 
    ax.set_ylabel ( "Radius of gyration" ) 
    ax.set_xticks ( np.arange(0,22,1) ) 
    plt.savefig   ( "rg_plot"+str(args.dop)+".png", dpi=1200 ) 
    plt.show() 
    
