#!/usr/licensed/anaconda3/2020.7/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
import aux 
import time 
'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration
'''

import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this index.', default=100)
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('-U', dest='U', metavar='UX', action='store', type=str, help='Name of potential function to parse information.')
args = parser.parse_args() 

if __name__ == "__main__":
    
    start = time.time() 

    U_list = [args.U] # aux.dir2U ( os.listdir (".") )
    # U_list       = ["U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9"]
    dop          = args.dop
        
    print (aux.edge_length(args.dop))
    fig = plt.figure( figsize=(8,6) )
    ax  = plt.axes() 
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    i = 0 
    Tmax = []  
    for U in U_list:
        rg_mean = np.array([]) 
        rg_std  = np.array([])      
        temperatures = aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(args.dop) ) )
        Tmax.append ( np.max(temperatures) )
        
        for T in temperatures:
            filename = U +"/DOP_"+str(dop)+"/"+str(T)+"/"+args.c

            master_dict = aux.get_pdict (filename, aux.edge_length(dop), aux.edge_length(dop), aux.edge_length(dop)) 
            
            tot_step = len(master_dict) 

            rg = np.array([]) 

            for key in master_dict: 
                rg = np.hstack ( (rg, aux.get_Rg(master_dict[key][0], aux.edge_length(dop), aux.edge_length(dop), aux.edge_length(dop)) ) )  

            rg_mean = np.hstack ( ( rg_mean, np.mean(rg[args.s:] ) ) )         
            rg_std  = np.hstack ( ( rg_std , np.std(rg[args.s:])/np.sqrt(int( tot_step /( (tot_step-args.s)/100 ) ) ) ) ) 
        
        rg_mean = np.array (rg_mean) 
        rg_std  = np.array (rg_std )    
       
        if U=="Uexcl":
            ax.errorbar   ( temperatures, rg_mean, yerr=rg_std, linewidth=3 )
        else:
            ax.errorbar   ( temperatures, rg_mean, yerr=rg_std, linewidth=1, color=cm.copper(i/9)) 
        i+=1 
    
    ax.legend     ( U_list, loc='best', fontsize=12)
    ax.set_xlabel ( "Temperature (reduced)", fontsize=18) 
    ax.set_ylabel ( "$R_g ^2$", fontsize=18)     
    ax.set_xticks ( np.arange(0, np.max(Tmax)+1, 1 ) )
    plt.savefig   ( "DOP_"+str(args.dop)+"_rg.png", dpi=1200)
    print ("Time taken by program is " + str (time.time()-start) + " seconds.")
    # plt.show() 
        
