#!/home/satyend/.conda/envs/data_analysis/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
# import aux 
import time 
import sys 
sys.path.insert(0, '/scratch/gpfs/satyend/MC_POLYMER/polymer_lattice/lattice_md/current/Explicit_Solvation/py_analysis')
import aux 
import multiprocessing 
import itertools
from sklearn.linear_model import LinearRegression 
from sklearn.linear_model import HuberRegressor

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
gives you the flory exponent
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain the flory exponent from that file.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this move number (not index or line number in file).', default=100)
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('-nproc', metavar='N', type=int, dest='nproc', action='store', help='Request these many proccesses.')
args = parser.parse_args() 

divnorm = matplotlib.colors.SymLogNorm (0.005, vmin=-0.1, vmax=0.1)


def get_starting_ind ( U, T, num, dop, dumpfile):
    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/" + dumpfile + "_" + str(num) + ".mc"
    df = pd.read_csv(filename, sep=' \| ', names=["energy", "mm_tot", "mm_aligned", "mm_naligned", "ms1_tot", "ms1_aligned", "ms1_naligned", "ms2_tot", "ms2_aligned", "ms2_naligned", "ms1s2_tot",  "ms1s2_aligned", "ms1s2_naligned", "time_step"], engine='python', skiprows=0)
    L = len(df["energy"])

    return int(df["time_step"].values[L-2000])

def infiltrate_coords_get_asphericity ( U, T, num, dop, coords_files, starting_index ):
    
    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/" + coords_files + "_" + str(num) + ".mc"
    starting_index = get_starting_ind (U,T, num, dop, "energydump")
    edge = aux.edge_length(dop)
    master_dict = aux.get_pdict (filename, starting_index, dop, edge, edge, edge)
    
    N = master_dict [ next(iter(master_dict)) ][0].shape[0]
    count = 0
    delta = 0
    for key in master_dict:
        coord_arr = aux.unfuck_polymer( master_dict[key][0], edge, edge, edge )
        r_com     = np.mean ( coord_arr, axis = 0 )
        rsumx = np.sum( (coord_arr[:,0] - r_com[0])**2 )/N
        rsumy = np.sum( (coord_arr[:,1] - r_com[1])**2 )/N
        rsumz = np.sum( (coord_arr[:,2] - r_com[2])**2 )/N
        delta += 1-3*(rsumx*rsumy+rsumy*rsumz+rsumx*rsumz)/(rsumx+rsumy+rsumz)**2
        count += 1

    return delta/count

if __name__ == "__main__":

    start = time.time() 
    ##################################

    U_list = aux.dir2U ( os.listdir (".") )
    # U_list = ["U11"]
    DB_DICT = {} 
    DB_DICT["U"]  = []
    DB_DICT["T"]  = []
    DB_DICT["delta_mean"] = []
    DB_DICT["delta_err" ] = []
    delta_dict    = {}
    ntraj_dict = {}
    dop            = args.dop
    coords_files   = args.c
    starting_index = args.s
    nproc          = args.nproc
    
    fig = plt.figure( figsize=(8,6) )
    ax  = plt.axes() 
    ax.tick_params(direction='in', bottom=True, top=True, left=True, right=True, which='both')
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    i = 0

    # instantiating pool
    pool1 = multiprocessing.Pool ( processes=nproc )
    pool_list = [pool1]
    

    for U in U_list:
        print ( "Inside U = " + U + ", and N = " + str(dop) + "...", flush=True )
        temperatures = aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(dop) ) )
        
        # get num_list for each temperature
        master_temp_list = []
        master_num_list  = []
        delta_mean = []
        delta_err  = []
        delta_dict.clear()
        ntraj_dict.clear()
        for T in temperatures:
            # print ("T is " + str(T), flush=True)
            num_list = list(np.unique ( aux.dir2nsim (os.listdir (str(U) + "/DOP_" + str(dop) + "/" + str(T) ) ) ) )
            master_num_list.extend ( num_list )
            master_temp_list.extend ( [T]*len(num_list))
            ntraj_dict[T] = len (num_list)
            delta_dict[T] = []

        # start multiprocessing... keeping in mind that each node only has 96 cores
        # start splitting up master_num_list and master_temp_list
        idx_range = len (master_num_list)//nproc + 1

        for uidx in range(idx_range):
            if uidx == idx_range-1:
                results = pool_list[ 0 ] .starmap ( infiltrate_coords_get_asphericity, zip( itertools.repeat(U), master_temp_list[uidx*nproc:], master_num_list[uidx*nproc:], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index) ) )
            else:
                results = pool_list[ 0 ] .starmap ( infiltrate_coords_get_asphericity, zip( itertools.repeat(U), master_temp_list[uidx*nproc:(uidx+1)*nproc], master_num_list[uidx*nproc:(uidx+1)*nproc], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index) ) )
                
            print ("Pool has been closed. This pool has {} threads.".format (len(results) ), flush=True )
            for k in range(len(master_temp_list[uidx*nproc:(uidx+1)*nproc])):
                delta_dict[master_temp_list[uidx*nproc+k]].append ( results[k] )


        for T in np.unique (master_temp_list):
            delta_mean.append ( np.mean ( delta_dict[T] ) )
            delta_err.append  ( np.std  ( delta_dict[T] ) / np.sqrt ( ntraj_dict[T] ) )
        
        DB_DICT["U"].extend       ([U]*len(delta_mean))
        DB_DICT["T"].extend       (temperatures)
        DB_DICT["delta_mean"].extend (delta_mean)
        DB_DICT["delta_err"].extend  (delta_err)

    pool1.close()
    pool1.join()
    
    i=0
    df = pd.DataFrame.from_dict (DB_DICT)
    df.to_csv ("ASPHERICITY-EXCL.mc", sep='|', index=False)
    
    stop = time.time()
    
    print ("Run time for N = " + str(args.dop) + " is {:.2f} seconds.".format(stop-start), flush=True)
    
