#!/home/satyend/.conda/envs/phase/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
import pandas as pd
import os
# import aux 
import time 
import sys 
sys.path.insert(0, '/scratch/gpfs/satyend/MC_POLYMER/polymer_lattice/lattice_md/py_analysis')
import aux 
import multiprocessing 
import itertools
from sklearn.linear_model import LinearRegression 
from sklearn.linear_model import HuberRegressor

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
gives you the flory exponent
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain the flory exponent from that file.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('--frac', dest='frac', action='store', nargs='+', type=float, help='List of fractions to probe.')
parser.add_argument('--U',    dest='U',    action='store', nargs='+', type=str,   help='List of potential energy surfaces..')
parser.add_argument('--set', dest='set', action='store', type=str, help='List of potential energy surfaces to probe.')
parser.add_argument('-nproc', metavar='N', type=int, dest='nproc', action='store', help='Request these many proccesses.')
parser.add_argument('-d1', dest='d1', metavar='d1', action='store', type=int, help='Starting index.')
parser.add_argument('-d2', dest='d2', metavar='d2', action='store', type=int, help='End index.')
args = parser.parse_args() 

divnorm = matplotlib.colors.LogNorm (vmin=-0.01, vmax=100)
cmap = cm.coolwarm

def get_starting_ind ( U, frac, num, dop, dumpfile):
	filename = U + "/DOP_" + str(dop) + "/" + str(frac) + "/" + dumpfile + "_" + str(num) + ".mc"
	df = pd.read_csv(filename, sep=' \| ', names=["energy", "mm_tot", "mm_aligned", "mm_naligned", "ms1_tot", "ms1_aligned", "ms1_naligned", "ms2_tot", "ms2_aligned", "ms2_naligned", "ms1s2_tot",  "ms1s2_aligned", "ms1s2_naligned", "time_step"], engine='python', skiprows=0)
	L = len(df["energy"])

	return int(df["time_step"].values[L-2000])


def get_avg_amounts (U, frac, num, dop, coords_file, starting_index, d1, d2):
	x = list (np.arange (d1, d2+1))
	y = []
	starting_index = get_starting_ind (U, frac, num, dop, "energydump")
	for delta in x:
		y.append ( aux.single_sim_flory_exp_energymix (U, H, num, dop, coords_file, starting_index, delta) )

	return np.array (y)


def get_avg_flory (U, frac, num, dop, coords_file, starting_index, d1, d2):
	x = list (np.arange (d1, d2+1))
	y = []
	starting_index = get_starting_ind (U, frac, num, dop, "energydump")
	for delta in x:
		y.append ( aux.single_sim_flory_exp_energymix (U, frac, num, dop, coords_file, starting_index, delta) )

	nu = []
	y = np.asarray (np.log(y))
	x = np.asarray (np.log(x)).reshape((-1,1))
	for j in range (1, len(x)-1):
		model = HuberRegressor()
		model.fit (x[j-1:j+2], y[j-1:j+2])
		r2 = model.score (x[j-1:j+2], y[j-1:j+2])
		nu.append (model.coef_[0])
	
	return np.mean (nu)

if __name__ == "__main__":

    start = time.time() 
    ##################################

    U_list    = args.U
    frac_list = args.frac
    DB_DICT = dict ()
    DB_DICT["x"]        = []
    DB_DICT["U"]        = []
    DB_DICT["nu_mean"]  = []
    DB_DICT["nu_err"  ] = []
    y_dict     = {}
    r2_dict    = {} 
    ntraj_dict = {}
    dop            = args.dop
    coords_files   = args.c
    starting_index = 0
    nproc          = args.nproc
    
    i = 0
    # instantiating pool
    pool1 = multiprocessing.Pool ( processes=nproc )
    pool_list = [pool1]
    
    xx = 0
    for U in U_list:
        print ( "Calculating Flory for U = " + U + ", and N = " + str(dop) + "...", flush=True )
        # temperatures = aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(dop) ) )
        
        # get num_list for each temperature
        master_frac_list    = []
        master_num_list  = []
        flory_mean = []
        flory_err  = []
        flory_r2   = []
        r2_dict.clear()
        ntraj_dict.clear()

        for frac in frac_list:
            # print ("T is " + str(T), flush=True)
            num_list = list( np.unique ( aux.dir2nsim (os.listdir (str(U) + "/DOP_" + str(dop) + "/" + str(frac) ) ) ) )
            master_num_list.extend ( num_list )
            master_frac_list.extend ( [frac]*len( num_list ) )
            ntraj_dict[frac] = len ( num_list )
            y_dict [frac]    = []
            r2_dict[frac]    = []

        # start multiprocessing... keeping in mind that each node only has 96 cores
        # start splitting up master_num_list and master_temp_list
        idx_range = len (master_num_list)//nproc + 1

        for uidx in range(idx_range):
            if uidx == idx_range-1:
                results = pool_list[ 0 ] .starmap ( get_avg_flory, zip( itertools.repeat(U), master_frac_list, master_num_list[uidx*nproc:], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index), itertools.repeat(args.d1), itertools.repeat(args.d2) ) )
            else:
                results = pool_list[ 0 ] .starmap ( get_avg_flory, zip( itertools.repeat(U), master_frac_list, master_num_list[uidx*nproc:(uidx+1)*nproc], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index), itertools.repeat(args.d1), itertools.repeat(args.d2) ) )
                
            print ("Pool has been closed. This pool has {} threads.".format (len(results) ), flush=True )
            for k in range(len(master_frac_list[uidx*nproc:(uidx+1)*nproc])):
                y_dict[master_frac_list[uidx*nproc+k]].append ( results[k] )


        for f in frac_list:
            DB_DICT["x"].append (f) 
            DB_DICT["U"].append (U)
            DB_DICT["nu_mean"].append (np.mean(y_dict[f]) )
            DB_DICT["nu_err" ].append (np.std(y_dict[f]) / np.sqrt( len( y_dict[f] ) ) )
            

    pool1.close()
    pool1.join()
    
    i=0
    df = pd.DataFrame.from_dict (DB_DICT)
    df.to_csv ("FLORY-EXPONENTS-"+str(args.d1)+"-"+str(args.d2)+"_set_"+str(args.set)+"_type2.mc", sep='|', index=False)
    
    stop = time.time()
    
    print ("Run time for N = " + str(args.dop) + " is {:.2f} seconds.".format(stop-start), flush=True)
    
