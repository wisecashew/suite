#!/home/satyend/.conda/envs/phase/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
from matplotlib.ticker import StrMethodFormatter
import pandas as pd
import os
import sys 
sys.path.insert(0, '/scratch/gpfs/satyend/MC_POLYMER/polymer_lattice/lattice_md/py_analysis')
import aux 
import time 
import sys 
import multiprocessing 
import itertools

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration. 
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('--U', type=str, dest='U', nargs='+', action='store', help='Enter FFs to probe.')
parser.add_argument('--colors', type=str, dest='colors', nargs='+', action='store', help='Enter temperatures to probe.')
parser.add_argument('--dump', dest='dump', metavar='dump', action='store', type=str, help='Name of dump file', default='dumpfile')
parser.add_argument('--png-name', dest='pn', metavar='imagename', action='store', type=str, help='Name of image file', default='rg_plot')
args = parser.parse_args() 

divnorm = matplotlib.colors.SymLogNorm ( 0.001, vmin=-0.2, vmax=0.1 ) # this is for entropy 

def get_starting_ind ( U, T, num, dop, dumpfile):
    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/" + dumpfile + "_" + str(num) + ".mc"
    df = pd.read_csv(filename, sep=' \| ', names=["energy", "mm_tot", "mm_aligned", "mm_naligned", "ms1_tot", "ms1_aligned", "ms1_naligned", "ms2_tot", "ms2_aligned", "ms2_naligned", "ms1s2_tot",  "ms1s2_aligned", "ms1s2_naligned", "time_step"], engine='python', skiprows=0)
    L = len(df["energy"])
    return int(df["time_step"].values[L-2000])


def infiltrate_coords_get_rg ( U, T, num, dop, coords_files, starting_index ):

    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/"+ coords_files + "_" + str(num)+".mc" 
    edge = aux.edge_length (dop)
    master_dict = aux.get_pdict (filename, starting_index, dop, edge, edge, edge)
    rg = aux.get_Rg(master_dict, edge, edge, edge) 
    return rg 

if __name__ == "__main__":    

	start = time.time() 
	##################################

	U_list = args.U
	plt.rcParams['font.family'] = 'sans-serif'
	plt.rcParams['font.family'] = 'Arial'
	font = {'color':  'black','weight': 'normal', 'size': 8}
	lsize = 8
	fig = plt.figure(figsize=(1.8, 1.8), constrained_layout=True)
	fig.tight_layout()
	ax  = plt.axes ()
	ax.tick_params(direction='in', bottom=True, top=True, left=True, right=True, which='both', pad=5)
	ax.tick_params(axis='x', labelsize=0)
	ax.tick_params(axis='y', labelsize=lsize)

	rg_max = 1 # (1+np.sqrt(2)+np.sqrt(3))/(3*6**0.5) * (dop**0.57) 
	df = pd.read_csv(args.dump, sep='\|', names=["FF", "frac", "Rg", "stddev"], skiprows=1, engine="python")
	print(df)

	if len(args.colors) == 0:
		col_list = ["limegreen", "white", "steelblue"]
	else:
		col_list = args.colors
	i = 0
	for idx,U in enumerate(U_list):
		print(f"FF = {U}", flush=True)
		rgba_color = col_list[idx]
		df_ = df[df["FF"].str.strip()==U]
		print(df_)
		ax.errorbar ( df_["frac"], df_["Rg"], yerr=df_["stddev"], linewidth=1, capsize=2, color=rgba_color, ecolor='k', fmt='none', label='_nolegend_')
		ax.plot     ( df_["frac"], df_["Rg"], marker='o', markeredgecolor='k', \
                   linestyle='--', linewidth=1, c=rgba_color, label='_nolegend_', markersize=8/1.3, zorder=11, clip_on=False )
		i += 1

	yticks = np.arange (1,8,1)
	ax.set_yticks (yticks)
	ax.set_yticklabels ([])
	ax.set_ylim (1, 7)
	ax.set_xlim (0, 1)
	ax.set_xticks (np.linspace (0,1,6))
	ax.set_xticklabels ([])
	ax.yaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator())
	ax.xaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator())

	ax.set_aspect ("auto")
	plt.savefig ( args.pn, bbox_inches='tight', dpi=1200 )
	stop = time.time()
	print ("Run time for is {:.2f} seconds.".format(stop-start), flush=True)

