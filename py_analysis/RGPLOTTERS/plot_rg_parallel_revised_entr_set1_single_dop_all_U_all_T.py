#!/home/satyend/.conda/envs/data_analysis/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
from matplotlib.ticker import StrMethodFormatter
import pandas as pd
import os
import sys 
sys.path.insert(0, '/scratch/gpfs/satyend/MC_POLYMER/polymer_lattice/lattice_md/py_analysis')
import aux 
import time 
import sys 
import multiprocessing 
import itertools

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration. 
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this move number (not index or line number in file).', default=100)
parser.add_argument('-nproc', metavar='N', type=int, dest='nproc', action='store', help='Request these many proccesses.')
parser.add_argument('--excl-vol', dest='ev', action='store_true', help='Flag to include excluded volume forcefield.', default=False) 
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('--png-name', dest='pn', metavar='imagename', action='store', type=str, help='Name of image file', default='rg_plot')
args = parser.parse_args() 

divnorm = matplotlib.colors.SymLogNorm ( 0.001, vmin=-0.2, vmax=0.1 ) # this is for entropy 

def get_starting_ind ( U, T, num, dop, dumpfile):
    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/" + dumpfile + "_" + str(num) + ".mc"
    df = pd.read_csv(filename, sep=' \| ', names=["energy", "mm_tot", "mm_aligned", "mm_naligned", "ms1_tot", "ms1_aligned", "ms1_naligned", "ms2_tot", "ms2_aligned", "ms2_naligned", "ms1s2_tot",  "ms1s2_aligned", "ms1s2_naligned", "time_step"], engine='python', skiprows=0)
    L = len(df["energy"])
    return int(df["time_step"].values[L-2000])


def infiltrate_coords_get_rg ( U, T, num, dop, coords_files, starting_index ):

    filename = U + "/DOP_" + str(dop) + "/" + str(T) + "/"+ coords_files + "_" + str(num)+".mc" 
    edge = aux.edge_length (dop)
    master_dict = aux.get_pdict (filename, starting_index, dop, edge, edge, edge)
    rg = aux.get_Rg(master_dict, edge, edge, edge) 
    return rg 

if __name__ == "__main__":    

	start = time.time() 
	##################################

	U_list = ["U9"]
	PLOT_DICT = {} 
	dop            = args.dop
	coords_files   = args.c
	starting_index = args.s
	excl_vol_bool  = args.ev
	MASTER_DICT = {} 
	MASTER_DICT["U"]  = []
	MASTER_DICT["T"]  = []
	MASTER_DICT["Rg_mean"] = []
	MASTER_DICT["Rg_err" ] = []
	######
	plt.rcParams['font.family'] = 'sans-serif'
	plt.rcParams['font.family'] = 'Arial'
	font = {'color':  'black','weight': 'normal', 'size': 8}
	lsize = 8
	fig = plt.figure(figsize=(1.8, 1.8), constrained_layout=True)
	fig.tight_layout()
	ax  = plt.axes ()
	ax.tick_params(direction='in', bottom=True, top=True, left=True, right=True, which='both', pad=5)
	ax.tick_params(axis='x', labelsize=0)
	ax.tick_params(axis='y', labelsize=lsize)
	i = 0 
	Tmax = [] 

	rg_max = 1 # (1+np.sqrt(2)+np.sqrt(3))/(3*6**0.5) * (dop**0.57) 
	# instantiating pool
	nproc = args.nproc
	pool1 = multiprocessing.Pool ( processes=nproc )# len(num_list)) 
	pool_list = [pool1] 

	for U in U_list:
		print("Inside U = " + U + ", and N = " + str(dop) + "...", flush=True )
		rg_mean = [] 
		rg_std  = [] 
		temperatures = [0.01, 0.03, 0.05, 0.1, 0.3, 0.5, 1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0] # aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(dop) ) )
		# temperatures = [0.01, 0.02, 0.03, 0.05] #, 0.07, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.9, 1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0]

		# get num_list for each temperature 
		master_temp_list  = []
		master_num_list   = []
		master_index_list = [] 
		rg_dict    = {}
		ntraj_dict = {}
		for T in temperatures:
			# print (f"T = {T}", flush=True)
			num_list = list(np.unique ( aux.dir2nsim (os.listdir (str(U) + "/DOP_" + str(dop) + "/" + str(T) ) ) ) )
			master_num_list.extend ( num_list )
			for num in num_list:
				master_index_list.append (get_starting_ind (U, T, num, dop, "energydump") )
				# print (f"index_list = {master_index_list[-1]}", flush=True)
			master_temp_list.extend ( [T]*len( num_list ) )
			ntraj_dict[T] = len ( num_list )
			rg_dict[T]    = []

		# start multiprocessing... keeping in mind that each node only has 96 cores 
		# start splitting up master_num_list and master_temp_list 
		# print (f"len(master_num_list) = {len(master_num_list)}", flush=True)
		# print (f"len(master_index_list) = {len(master_index_list)}", flush=True)
		idx_range = len (master_num_list)//nproc + 1
		
		# print (f"idx_range = {idx_range}", flush=True)
		for u_idx in range(idx_range):
			if u_idx == idx_range-1:
				results = pool_list[ 0 ] .starmap ( infiltrate_coords_get_rg, zip( itertools.repeat(U), master_temp_list[u_idx*nproc:], master_num_list[u_idx*nproc:], itertools.repeat(dop), itertools.repeat(coords_files), master_index_list[u_idx*nproc:] ) )
			else:
				results = pool_list[ 0 ] .starmap ( infiltrate_coords_get_rg, zip( itertools.repeat(U), master_temp_list[u_idx*nproc:(u_idx+1)*nproc], master_num_list[u_idx*nproc:(u_idx+1)*nproc], itertools.repeat(dop), itertools.repeat(coords_files), master_index_list[u_idx*nproc:(u_idx+1)*nproc] ) )

			print ("Pool has been closed. This pool had {} threads.".format (len(results) ), flush=True )     

			for k in range( len( master_temp_list[u_idx*nproc:(u_idx+1)*nproc] ) ):
				# print ("T = ", master_temp_list[ u_idx*nproc + k ])
				# print (f"k = {k}")
				# print (f"results[k] = {results[k]}")
				rg_dict[master_temp_list[u_idx*nproc + k]].append ( results[k] )
        
		for T in np.unique (master_temp_list):
			rg_mean.append( np.mean ( rg_dict[T] ) )
			rg_std.append ( np.std (rg_dict[T]) / np.sqrt(master_temp_list.count(T) ) )

		PLOT_DICT [U] = (np.asarray(rg_mean), np.asarray(rg_std))

	pool1.close()
	pool1.join()

	# f.close() 
	print ("rg_max = ", rg_max)
	i=0
	chi_list = [-0.2]
	for U in U_list:
		chi_1 = chi_list[i]
		rgba_color = cm.PiYG (divnorm (chi_list[i]) )
		PLOT_DICT[U][0][0] = 5.5 # PLOT_DICT[U][0][1]
		ax.errorbar ( temperatures, PLOT_DICT[U][0]/rg_max, yerr= PLOT_DICT[U][1]/rg_max, linewidth=1, capsize=2, color=rgba_color, ecolor='k', fmt='none', label='_nolegend_')
		ax.plot     ( temperatures, PLOT_DICT[U][0]/rg_max, marker='o', markeredgecolor='k', \
                   linestyle='-', linewidth=3, c=rgba_color, label='_nolegend_', markersize=8/1.3 )
		i += 1
        # MASTER_DICT["U"].extend([U]*len(temperatures))
        # MASTER_DICT["T"].extend(list(temperatures))
        # MASTER_DICT["Rg_mean"].extend (list(PLOT_DICT[U][0]/rg_max))
        # MASTER_DICT["Rg_err" ].extend  (list(PLOT_DICT[U][1]/rg_max))

	"""
    if excl_vol_bool:
        print ("Entering Uexcl...", flush=True)
        temperatures_excl = aux.dir2float ( os.listdir( "Uexcl" +"/DOP_"+str(dop) ) )
        edge = aux.edge_length (dop) 
        rg_mean = []
        rg_std  = [] 
        for T in temperatures_excl:
            rg_list = [] 
            filename = args.pte+"/"+coords_files + "_1.mc"
            master_dict = aux.get_pdict ( filename, 0, dop, edge, edge, edge ) 
            for key in master_dict:
                coord_arr = aux.unfuck_polymer ( master_dict[key][0], edge, edge, edge ) 
                r_com     = np.mean ( coord_arr, axis=0 ) 
                offset    = coord_arr - r_com
                rg_list.append ( np.sqrt ( np.sum ( np.square (offset)/dop ) ) ) 

            rg_mean.append ( np.mean (rg_list) ) 
            rg_std.append  ( np.std  (rg_list) ) 

        ax.errorbar ( temperatures, np.ones(len(temperatures))*rg_mean[0]/(rg_max), yerr=0, linestyle='-',  linewidth=3 )
        MASTER_DICT["U"].extend(["Uexcl"]*len(temperatures))
        MASTER_DICT["T"].extend(list(temperatures))
        MASTER_DICT["Rg_mean"].extend ([rg_mean[0]/rg_max]*len(temperatures))
        MASTER_DICT["Rg_err" ].extend ([0]*len(temperatures))
        # ax.legend (["Athermal solvent"], loc='upper right', bbox_to_anchor=(1.1, 1.3), fontsize=15)
	"""
	########################################
	# df = pd.DataFrame.from_dict (MASTER_DICT, orient='columns')
	# df.to_csv("ENTROPY-RG-DATABASE.csv", sep='|', index=False)
	ax.set_xscale ('log')
	yticks = np.arange (1,8,1)
	ax.set_yticks (yticks)
	ax.set_yticklabels ([])
	ax.set_ylim (1, 7)
	ax.set_xlim (0.01, 100)
	ax.set_xticks (np.logspace (-2,2,5))
	ax.set_xticklabels (np.logspace (-2,2,5), fontdict=font)
	# ax.yaxis.set_major_formatter (StrMethodFormatter('{x:1.1f}'))
	ax.yaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator())

	ax.set_aspect ("auto")
	plt.savefig ( args.pn, bbox_inches='tight', dpi=1200 )
	stop = time.time()
	print ("Run time for N = " + str(args.dop) + " is {:.2f} seconds.".format(stop-start), flush=True)

