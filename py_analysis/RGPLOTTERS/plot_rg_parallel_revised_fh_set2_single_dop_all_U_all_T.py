#!/home/satyend/.conda/envs/data_analysis/bin/python

import numpy as np 
import re 
import matplotlib
matplotlib.use('Agg')
import matplotlib.cm as cm
import matplotlib.pyplot as plt 
from matplotlib.ticker import StrMethodFormatter
import pandas as pd
import os
import sys 
sys.path.insert(0, '/scratch/gpfs/satyend/MC_POLYMER/polymer_lattice/lattice_md/py_analysis')
import aux 
import time 
import multiprocessing 
import itertools

os.system("taskset -p 0xfffff %d" % os.getpid())
os.environ['MKL_NUM_THREADS'] = '1'
os.environ['NUMEXPR_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'

sys.stdout.flush() 

'''
This code will take in a trajectory file generated by my MonteCarlo engine and 
give you Radius of Gyration. 
'''
''' 
shebang for cluster: #!/usr/licensed/anaconda3/2020.7/bin/python
shebang for homemachine: #!/usr/bin/env python3
'''


import argparse 
parser = argparse.ArgumentParser(description="Read a trajectory file and obtain a radius of gyration plot given a degree of polymerization over a range of temperatures and potential energy surfaces.")
parser.add_argument('-dop', metavar='DOP', dest='dop', type=int, action='store', help='enter a degree of polymerization.')
parser.add_argument('-s', metavar='S', type=int, dest='s', action='store', help='start parsing after this move number (not index or line number in file).', default=100)
parser.add_argument('-nproc', metavar='N', type=int, dest='nproc', action='store', help='Request these many proccesses.')
parser.add_argument('--excl-vol', dest='ev', action='store_true', help='Flag to include excluded volume forcefield.', default=False) 
parser.add_argument('--coords', dest='c', metavar='coords.txt', action='store', type=str, help='Name of energy dump file to parse information.', default='coords.txt')
parser.add_argument('--png-name', dest='pn', metavar='imagename', action='store', type=str, help='Name of image file', default='rg_plot')
parser.add_argument('--show-plot', dest='sp', action='store_true', help='Flag to include to see plot.') 
args = parser.parse_args() 

divnorm = matplotlib.colors.SymLogNorm ( 0.001, vmin=-0.1, vmax=0.1 ) # this is for entropy 

if __name__ == "__main__":    

	start = time.time() 
	##################################

	U_list = ["U1", "U6", "U11"]
	PLOT_DICT = {} 
	dop            = args.dop
	coords_files   = args.c
	starting_index = args.s
	excl_vol_bool  = args.ev
	show_plot_bool = args.sp

	######
	plt.rcParams['font.family'] = 'sans-serif'
	plt.rcParams['font.family'] = 'Arial'
	font = {'color':  'black','weight': 'normal', 'size': 8}
	lsize = 8
	fig = plt.figure(figsize=(1.8, 1.8), constrained_layout=True)
	fig.tight_layout()
	ax  = plt.axes ()
	ax.tick_params(direction='in', bottom=True, top=True, left=True, right=True, which='both', pad=5)
	ax.tick_params(axis='x', labelsize=0)
	ax.tick_params(axis='y', labelsize=lsize)
	i = 0 
	Tmax = [] 

	rg_max = 1 # 1/(6**0.5) * (dop**0.5) 
	# instantiating pool
	nproc = args.nproc
	pool1 = multiprocessing.Pool ( processes=nproc )# len(num_list)) 

	pool_list = [pool1] # , pool2]

	f = open("RG_DATA_"+str(dop)+".mc", "w") 

	for U in U_list:
		f.write ( "U = " + str(U) + ":\n" )
		print("Inside U = " + U + ", and N = " + str(dop) + "...", flush=True )
		rg_mean = [] 
		rg_std  = [] 
		temperatures = aux.dir2float ( os.listdir( str(U) +"/DOP_"+str(dop) ) )
		temperatures = [0.01, 0.1, 0.5, 1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0]
		Tmax.append ( np.max(temperatures) )

		# get num_list for each temperature 
		master_temp_list = []
		master_num_list = []
		rg_dict    = {}
		ntraj_dict = {}
		for T in temperatures: 
			# print ("T is " + str(T), flush=True) 
			num_list = list(np.unique ( aux.dir2nsim (os.listdir (str(U) + "/DOP_" + str(dop) + "/" + str(T) ) ) ) )
			master_num_list.extend ( num_list )
			master_temp_list.extend ( [T]*len( num_list ) )
			ntraj_dict[T] = len ( num_list )
			rg_dict[T] = []

		# start multiprocessing... keeping in mind that each node only has 96 cores 
		# start splitting up master_num_list and master_temp_list 

		idx_range = len (master_num_list)//nproc + 1
		# print (idx_range)
		for u_idx in range(idx_range):
			if u_idx == idx_range-1:
				results = pool_list[ 0 ] .starmap ( aux.infiltrate_coords_get_rg, zip( itertools.repeat(U), master_temp_list[u_idx*nproc:], master_num_list[u_idx*nproc:], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index) ) )
			else:
				results = pool_list[ 0 ] .starmap ( aux.infiltrate_coords_get_rg, zip( itertools.repeat(U), master_temp_list[u_idx*nproc:(u_idx+1)*nproc], master_num_list[u_idx*nproc:(u_idx+1)*nproc], itertools.repeat(dop), itertools.repeat(coords_files), itertools.repeat(starting_index) ) )

		print ("Pool has been closed. This pool had {} threads.".format (len(results) ), flush=True )     

		for k in range( len( master_temp_list[u_idx*nproc:(u_idx+1)*nproc] ) ):
			rg_dict[master_temp_list[u_idx*nproc + k]].append( results[k] )

		for T in np.unique (master_temp_list):
			# print ("T = ", T, ", rg_dict[", T, "] = ", rg_dict[T])
			rg_mean.append( np.mean ( rg_dict[T] ) )
			rg_std.append ( np.std (rg_dict[T]) / np.sqrt(master_temp_list.count(T) ) )

		# print (rg_mean)
		# if rg_max < np.max (rg_mean):
		#    rg_max = np.max(rg_mean) 
		PLOT_DICT [U] = (np.asarray(rg_mean), np.asarray(rg_std))

		f.write("Rg^2: ") 
		for elem in rg_mean: 
			f.write ( "{:.2f} ".format(elem))
		f.write ("\n") 
		f.write ("Error: ")
		for elem in rg_std: 
			f.write ( "{:.2f} ".format(elem) )
		f.write("\n") 
		f.write("T: ") 
		for elem in temperatures: 
			f.write ( "{:.2f} ".format(elem) ) 
		f.write("\n") 
		i+=1 
		f.flush()  

	pool1.close()
	pool1.join()

	f.close() 
	print ("rg_max = ", rg_max)
	i=0
	chi_list = [0.1, 0, -0.2]
	for idx,U in enumerate(U_list):
		rgba_color = cm.PiYG(divnorm (chi_list[idx]))
		ax.errorbar ( temperatures, PLOT_DICT[U][0]/rg_max, yerr= PLOT_DICT[U][1]/rg_max, linewidth=1, capsize=2, color=rgba_color, ecolor='k', fmt='none', label='_nolegend_')
		ax.plot   ( temperatures, PLOT_DICT[U][0]/rg_max, marker='o', markeredgecolor='k', \
                    linestyle='-', linewidth=3, c=rgba_color, label='_nolegend_', markersize=8/1.3, zorder=11 ) 
		i += 1

	########################################

	ax.set_xscale ('log')
	yticks = np.arange (1,8,1)
	ax.set_yticks (yticks)
	ax.set_yticklabels (ax.get_yticks(), fontdict=font)
	ax.set_ylim (1, 7)
	ax.set_xlim (0.01, 100)
	ax.set_xticks (np.logspace(-2,2,5))
	ax.set_xticklabels (np.logspace(-2,2,5), fontdict=font)
	ax.yaxis.set_major_formatter (StrMethodFormatter('{x:1.1f}'))
	ax.yaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator())
	# ax.minorticks_on()


	ax.set_aspect ('auto')
	plt.savefig ( args.pn+".png", bbox_inches='tight', dpi=1200 )
	stop = time.time()
	print ("Run time for N = " + str(args.dop) + " is {:.2f} seconds.".format(stop-start), flush=True)

