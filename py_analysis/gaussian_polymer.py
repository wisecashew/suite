#!/home/satyend/.conda/envs/phase/bin/python

import numpy as np
import re
import argparse

parser = argparse.ArgumentParser(description="Creates a data file for the polymer.")
parser.add_argument ("-N", dest='N', type=int, action='store', help="Length of polymer.")
parser.add_argument ("--edge", dest='edge', type=float, action='store', help="Length of polymer.")
args = parser.parse_args ()


if __name__=="__main__":

	N        = args.N
	k_spring = 1
	k_b      = 1
	T        = 2/3
	x0       = 1
	sigma    = np.sqrt (k_b*T/k_spring)

	polymer  = np.zeros ((N, 3))
	polymer[0,:] = np.array ([2,2,2])

	for i in range(N-1):
		# print (2*np.random.randint (0, 2, dtype=int)-1)
		deviation      = 2*np.random.random (size=(3,)) - 1
		polymer[i+1,:] = polymer[i] + deviation/np.linalg.norm (deviation)

	# write a settings file 
	f = open ("sys.gaussianpolymer.data", 'w')
	f.write ("# LAMMPS data file generated by gaussian_polymer.py\n")
	f.write ("\n")
	f.write (f"{N} atoms\n")
	f.write (f"1 atom types\n")
	f.write (f"{N-1} bonds\n")
	f.write (f"1 bond types\n")
	f.write ("\n")
	f.write (f"{-args.edge}    {args.edge}    xlo    xhi\n")
	f.write (f"{-args.edge}    {args.edge}    ylo    yhi\n")
	f.write (f"{-args.edge}    {args.edge}    zlo    zhi\n")
	f.write ("\n")
	f.write ("Masses\n")
	f.write ("\n")
	f.write ("1    1.0000    # monomer bead\n")
	f.write ("\n")
	f.write ("Atoms\n")
	f.write ("\n")
	
	for idx, bead in enumerate (polymer):
		f.write (f"{idx+1} \t {1} \t {1} \t {0} \t {bead[0]} \t {bead[1]} \t {bead[2]} \t 0 \t 0 \t 0\n")

	f.write ("\n")
	f.write ("Bonds\n")
	f.write ("\n")

	for i in range (N-1):
		f.write (f"{i+1} \t {1} \t {i+1} \t {i+2}\n")

	f.close ()



