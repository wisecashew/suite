from mpl_toolkits import mplot3dimport re import numpy as npimport matplotlib.pyplot as plt npoly = 1snapshots = 1001 st_b_str = "Dumping coordinates at step"pmer_num_str = "Dumping coordinates of Polymer #" start_str = "START" end_str_1 = "END"end_str_2 = "~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#\n"def extract_loc_from_string(a_string):    loc = [int(word) for word in a_string.split() if word.isdigit() ]         return np.asarray(loc) def unfuck_polymer(polymer, x, y, z):     unfucked_polymer = np.asarray([polymer[0,:]])        for i in range ( polymer.shape[0]-1 ) :         diff = polymer[i+1,:] - polymer[i,:]            for j in range(3):            diff[j] = modified_modulo(diff[j], x)            unfucked_polymer = np.vstack( (unfucked_polymer, unfucked_polymer[i]+diff ) )         return unfucked_polymer  def modified_modulo(divident, divisor):    midway = divisor/2    if (divident%divisor > midway):        result = (divident%divisor)-divisor        return result    else:        return divident%divisor# master_dict will be the dictionary which will contain polymer coordinates at each step # this will be a large data structure master_dict = {} step_flag = 0 pmer_flag = -1 end_step_flag = 0step_num = 0 coord_file = open( "coords.txt", 'r' )coord_file = coord_file.readlines()  for line in coord_file:    if ( re.search(st_b_str, line)):                step_num = int( (extract_loc_from_string (line.replace('.', ' ') ) ) )        # print(step_num)        master_dict[step_num] = {}                 step_flag = 1        pmer_flag = -1        end_step_flag = 0        continue         elif  (re.search (start_str, line)  ):        continue         elif ( re.search (pmer_num_str, line )):        # print("hit.")        pmer_flag += 1        master_dict[step_num][pmer_flag] = np.empty ( (0,3) )          continue         elif ( re.search(end_str_1, line ) ):        end_step_flag = 1        step_flag = 0        pmer_flag = -1             elif ( re.search( end_str_2, line) ):        continue            else:        # print(pmer_flag)        monomer_coords = extract_loc_from_string ( line )         master_dict[step_num][pmer_flag] = np.vstack( (master_dict[step_num][pmer_flag], monomer_coords) )        continue deg_poly = np.shape( master_dict[0][0] )[0] fig=plt.figure(figsize=(4,4)) ax = fig.add_subplot(111, projection='3d')# for t in range(20):    ax.set_xlim3d(left=-2, right=3)ax.set_ylim3d(bottom=-1, top=5)ax.set_zbound(lower=-11, upper = 3)ax.set_zticks(np.arange(-11,3))ax.set_xticklabels([])ax.set_yticklabels([])ax.set_zticklabels([])# ax.set_zlim3d(left=-50, right=50)x_coords = [] y_coords = []z_coords = [] unfucked_polymer = unfuck_polymer( master_dict[10][0], 32, 32, 32 )for i in range(deg_poly):        x_coords.append( unfucked_polymer[i][0] )    y_coords.append( unfucked_polymer[i][1] )    z_coords.append( unfucked_polymer[i][2] )ax.plot(x_coords, y_coords, z_coords, c='C1')ax.scatter(x_coords, y_coords, z_coords, marker='o', c='g', alpha=0.5)plt.savefig('step0.png', dpi=1200)            